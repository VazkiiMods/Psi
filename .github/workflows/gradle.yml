name: Java CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Validate gradlew integrity
        uses: gradle/actions/wrapper-validation@v3

      - name: Cache gradle build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./.gradle/loom-cache/remapped-mods
            ./build/moddev
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', './gradle.properties', './settings.gradle', '**/gradle-wrapper.properties') }}

      - name: Calculate artifact names
        id: calculate_artifact_names
        run: |
          MC=$(awk -F '=' '$1 == "minecraft_version" { print $2 }' gradle.properties)
          BUILD=$(awk -F '=' '$1 == "mod_version" { print $2 }' gradle.properties)
          echo "neoforge=build/libs/Psi-${MC}-${BUILD}.jar" >> "$GITHUB_OUTPUT"

      - name: Lint files
        run: |
          ./gradlew checkSyntax

      - name: Build
        run: |
          RELEASE_MODE=${{ startsWith(github.ref, 'refs/tags/release-') && '1' || '0' }} \
          ./gradlew build

      - name: PMD report
        uses: jwgmeligmeyling/pmd-github-action@v1
        if: failure()
        with:
          path: "**/reports/pmd/main.xml"

      - name: Stop Gradle
        run: ./gradlew --stop

      - name: Sign jars
        env:
          SIGNING_KEY: ${{ secrets.VIOLET_MOON_SIGNING_KEY }}
        if: ${{ env.SIGNING_KEY != '' }}
        run: |
          echo "${SIGNING_KEY}" | gpg --import -
          gpg --local-user "Violet Moon Signing Key" --armor \
            --detach-sign ${{ steps.calculate_artifact_names.outputs.neoforge }}

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Neoforge
          path: |
            ${{ steps.calculate_artifact_names.outputs.neoforge }}
            ${{ steps.calculate_artifact_names.outputs.neoforge }}.asc

      - name: Upload Releases
        if: startsWith(github.ref, 'refs/tags/release-')
        env:
          GH_TOKEN: ${{ github.token }}
          GIT_REF: ${{ github.ref }}
          NEOFORGE_JAR: ${{ steps.calculate_artifact_names.outputs.neoforge }}
          CURSEFORGE_TOKEN: ${{ secrets.VAZKII_CURSEFORGE_TOKEN }}
          MODRINTH_TOKEN: ${{ secrets.VAZKII_MODRINTH_TOKEN }}
        run: |
          scripts/upload_releases.sh
