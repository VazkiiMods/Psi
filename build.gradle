plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'pmd'
    id 'com.diffplug.spotless' version '7.0.3'
    id 'net.neoforged.moddev' version '2.0.91'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        // for Patchouli and JEI
        name "blamejared"
        url "https://maven.blamejared.com/"
        content {
            includeGroup "vazkii.patchouli"
            includeGroup "mezz.jei"
        }
    }
}

base {
    archivesName = mod_id
}

spotless {
    java {
        target project.fileTree(dir: 'src/main/java/vazkii/psi', include: '**/*.java')
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
        replaceRegex 'Too much space after if', '(if|for|while|switch) +\\(', '$1('
    }
}

pmd {
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

tasks.register('checkSyntax') {
    dependsOn spotlessJavaCheck, pmdMain
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    validateAccessTransformers = true

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
        }

        client {
            client()
            gameDirectory = project.file('runs/client')
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            gameDirectory = project.file('runs/server')
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            programArguments.addAll('--nogui')
        }

        data {
            data()
            gameDirectory = project.file('runs/data')
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
        }
    }

    mods {
        testproject {
            sourceSet sourceSets.main
        }
    }

    parchment {
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.parchment_version
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly('org.jetbrains:annotations:26.0.2')

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE:api"
    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/psd/**'
        duplicatesStrategy 'include'
    }
}

jar {
    archiveFileName = "${mod_name}-${minecraft_version}-${mod_version}.jar"

    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "vazkii",
                "Specification-Version": "1",
                "Implementation-Title": "${mod_id}",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"vazkii",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "psi.mixins.json"
        ])
    }
}



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
